# bot.py
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã ‚Äî —ç—Ç–∏ –º–æ–¥—É–ª–∏ –±—É–¥—É—Ç –≤ –ø–∞–ø–∫–µ parsers/
from parsers.stat_api import search_by_name, get_company_by_bin
from parsers.kgd_api import get_tax_info
from parsers.court_api import get_court_cases
from parsers.zakup_api import get_goszakup_info
from parsers.licenses_api import get_licenses_info
from parsers.utils import format_full_card, is_bin

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080))

if not BOT_TOKEN:
    logger.error("BOT_TOKEN is not set")
    raise SystemExit("BOT_TOKEN required")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏)
kb_main = ReplyKeyboardMarkup(resize_keyboard=True)
kb_main.add(KeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ –ë–ò–ù"), KeyboardButton("üîé –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é"))
kb_back = ReplyKeyboardMarkup(resize_keyboard=True)
kb_back.add(KeyboardButton("üîô –í –º–µ–Ω—é"))

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Ä–∞–∑—É –ë–ò–ù/–Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=kb_main
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é
@dp.message(F.text == "üîé –ü–æ –ë–ò–ù")
async def ask_bin(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –ë–ò–ù (12 —Ü–∏—Ñ—Ä) –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=kb_back)

@dp.message(F.text == "üîé –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
async def ask_name(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è) ‚Äî –≤—ã–¥–∞—é –¥–æ 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.", reply_markup=kb_back)

@dp.message(F.text == "üîô –í –º–µ–Ω—é")
async def back_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é:", reply_markup=kb_main)

# –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
@dp.message(F.text)
async def handle_text(message: types.Message):
    text = message.text.strip()

    # –∫–æ–º–∞–Ω–¥—ã-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
    if text.lower() in ("/menu", "–º–µ–Ω—é"):
        await message.answer("–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=kb_main)
        return

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    await message.chat.do("typing")

    # –ï—Å–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ë–ò–ù ‚Äî –ø–æ–∏—Å–∫ –ø–æ –ë–ò–ù
    if is_bin(text):
        await message.answer("üîé –ò—â—É –ø–æ –ë–ò–ù...")
        try:
            basic = await get_company_by_bin(text)
            if not basic:
                await message.answer("‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è –ø–æ —Ç–∞–∫–æ–º—É –ë–ò–ù –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=kb_back)
                return
            await send_full_card(message.chat.id, basic)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ë–ò–ù: %s", e)
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –ë–ò–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb_back)
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    await message.answer("üîé –ò—â—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)...")
    try:
        results = await search_by_name(text, limit=5)
        if not results:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.", reply_markup=kb_back)
            return

        kb = InlineKeyboardMarkup(row_width=1)
        for it in results:
            name = it.get("name") or it.get("title") or "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"
            bin_ = it.get("bin") or it.get("BIN") or ""
            label = f"{name} ‚Äî {bin_}" if bin_ else name
            cb_data = f"select:{bin_}"
            kb.add(InlineKeyboardButton(text=label, callback_data=cb_data))

        await message.answer("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É:", reply_markup=kb)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: %s", e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb_back)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (callback)
@dp.callback_query(lambda c: c.data and c.data.startswith("select:"))
async def on_select(callback: types.CallbackQuery):
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏
    bin_ = callback.data.split(":", 1)[1]
    if not bin_:
        await callback.message.answer("–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –ë–ò–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫.", reply_markup=kb_back)
        return

    await callback.message.chat.do("typing")
    try:
        basic = await get_company_by_bin(bin_)
        if not basic:
            await callback.message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=kb_back)
            return
        await send_full_card(callback.message.chat.id, basic)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: %s", e)
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏.", reply_markup=kb_back)

# –°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ (–∑–∞–ø—Ä–æ—Å—ã –∫ –¥–æ–ø. —Å–µ—Ä–≤–∏—Å–∞–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
async def send_full_card(chat_id: int, basic_info: dict):
    bin_ = basic_info.get("bin") or basic_info.get("BIN")
    # –ó–∞–ø—Ä–æ—Å—ã –∫ –¥–æ–ø. –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –≤–µ—Ä–Ω—ë—Ç –¥–∞–Ω–Ω—ã–µ ‚Äî –≤–µ—Ä–Ω—ë—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    tasks = [
        get_tax_info(bin_),
        get_court_cases(bin_),
        get_goszakup_info(bin_),
        get_licenses_info(bin_),
    ]
    try:
        kgd_data, court_data, zakup_data, lic_data = await asyncio.gather(*tasks)
    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ–ø. –¥–∞–Ω–Ω—ã—Ö: %s", e)
        kgd_data, court_data, zakup_data, lic_data = {}, [], [], []

    text = format_full_card(basic_info, kgd_data, court_data, zakup_data, lic_data)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –¥–µ–ª–∏–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    MAX = 3900
    if len(text) <= MAX:
        await bot.send_message(chat_id, text, parse_mode="Markdown", disable_web_page_preview=True)
    else:
        for i in range(0, len(text), MAX):
            await bot.send_message(chat_id, text[i:i+MAX], parse_mode="Markdown", disable_web_page_preview=True)

# Health endpoint –¥–ª—è Render (–∏ –¥—Ä—É–≥–∏—Ö —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤)
async def start_server():
    app = web.Application()
    async def health(request):
        return web.Response(text="OK")
    app.router.add_get("/", health)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info("Health server started on port %s", PORT)

async def main():
    await start_server()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Stopping bot")
