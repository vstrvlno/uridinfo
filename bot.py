# bot.py
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiohttp import web

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã ---
from parsers.stat_api import search_by_name, get_company_by_bin
from parsers.kgd_api import get_tax_debt
from parsers.court_api import get_court_cases
from parsers.zakup_api import get_goszakup_info
from parsers.licenses_api import get_licenses_info
from parsers.utils import format_full_card, is_bin

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080))

if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
kb_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –ë–ò–ù")],
        [KeyboardButton(text="üîé –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")]
    ],
    resize_keyboard=True
)

kb_back = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
    resize_keyboard=True
)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Ä–∞–∑—É –ë–ò–ù/–Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=kb_main
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@dp.message(F.text == "üîé –ü–æ–∏—Å–∫ –ø–æ –ë–ò–ù")
async def ask_bin(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –ë–ò–ù (12 —Ü–∏—Ñ—Ä) –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=kb_back)

@dp.message(F.text == "üîé –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
async def ask_name(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –ø–æ–∫–∞–∂—É –¥–æ 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.", reply_markup=kb_back)

@dp.message(F.text == "üîô –í –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é:", reply_markup=kb_main)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(F.text)
async def handle_text(message: types.Message):
    text = message.text.strip()

    if text.lower() in ("–º–µ–Ω—é", "/menu"):
        await message.answer("–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=kb_main)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —ç—Ç–æ –ë–ò–ù –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if is_bin(text):
        await message.answer("üîç –ò—â—É –ø–æ –ë–ò–ù...")
        try:
            company = await get_company_by_bin(text)
            if not company:
                await message.answer("‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è –ø–æ —Ç–∞–∫–æ–º—É –ë–ò–ù –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=kb_back)
                return
            await send_full_card(message.chat.id, company)
        except Exception as e:
            logger.exception(e)
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –ë–ò–ù.", reply_markup=kb_back)
    else:
        await message.answer("üîç –ò—â—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–æ 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)...")
        try:
            results = await search_by_name(text, limit=5)
            if not results:
                await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back)
                return

            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"{r.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî {r.get('bin', '')}",
                            callback_data=f"select:{r.get('bin', '')}"
                        )
                    ]
                    for r in results
                ]
            )
            await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=kb)
        except Exception as e:
            logger.exception(e)
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.", reply_markup=kb_back)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ---
@dp.callback_query(F.data.startswith("select:"))
async def select_company(callback: types.CallbackQuery):
    await callback.answer()
    bin_ = callback.data.split(":", 1)[1]
    if not bin_:
        await callback.message.answer("‚ùå –£ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –ë–ò–ù.")
        return

    await callback.message.answer("üìÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏...")
    try:
        company = await get_company_by_bin(bin_)
        if not company:
            await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=kb_back)
            return
        await send_full_card(callback.message.chat.id, company)
    except Exception as e:
        logger.exception(e)
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏.", reply_markup=kb_back)

# --- –°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ ---
async def send_full_card(chat_id: int, basic_info: dict):
    bin_ = basic_info.get("bin") or basic_info.get("BIN")

    tasks = [
        get_tax_debt(bin_),
        get_court_cases(bin_),
        get_goszakup_info(bin_),
        get_licenses_info(bin_),
    ]

    try:
        kgd, courts, zakup, lic = await asyncio.gather(*tasks)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        kgd, courts, zakup, lic = {}, [], [], []

    text = format_full_card(basic_info, kgd, courts, zakup, lic)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    MAX_LEN = 3900
    for i in range(0, len(text), MAX_LEN):
        await bot.send_message(chat_id, text[i:i+MAX_LEN], parse_mode="Markdown", disable_web_page_preview=True)

# --- Health-check –¥–ª—è Render ---
async def start_server():
    app = web.Application()
    async def health(_):
        return web.Response(text="OK")
    app.router.add_get("/", health)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"Health —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    await start_server()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
