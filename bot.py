import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import web
from dotenv import load_dotenv

import unified_api  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080))

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()


# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∏ —è –ø–æ–∫–∞–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –†–ö.\n\n"
        "–ü—Ä–∏–º–µ—Ä: <b>–ö–∞–∑–û–π–ª–ì—Ä—É–ø–ø-2009</b>"
    )


@dp.message()
async def handle_search(message: Message):
    query = message.text.strip()
    await message.answer("üîç –ò—â—É –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    result = await unified_api.search_company(query)
    if result:
        await message.answer(result)
    else:
        await message.answer("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")


# --- –î–ª—è Render (Webhook —Å–µ—Ä–≤–µ—Ä) ---
async def handle_request(request):
    return web.Response(text="Bot is running!")


async def on_startup():
    app = web.Application()
    app.router.add_get("/", handle_request)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logging.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(on_startup())
