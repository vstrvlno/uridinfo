import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiohttp import web

from parsers.unified_api import search_company, format_result  # ‚úÖ –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080))

if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
kb_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –ë–ò–ù")],
        [KeyboardButton(text="üîé –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")]
    ],
    resize_keyboard=True
)

kb_back = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîô –í –º–µ–Ω—é")]],
    resize_keyboard=True
)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.\n\n"
        "–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ *–ë–ò–ù* –∏–ª–∏ *–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏*, –∞ —è –ø–æ–∫–∞–∂—É —Å–≤–æ–¥–∫—É:",
        reply_markup=kb_main,
        parse_mode="Markdown"
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@dp.message(F.text == "üîé –ü–æ–∏—Å–∫ –ø–æ –ë–ò–ù")
async def ask_bin(message: types.Message):
    await message.answer("üì® –û—Ç–ø—Ä–∞–≤—å –ë–ò–ù (12 —Ü–∏—Ñ—Ä):", reply_markup=kb_back)

@dp.message(F.text == "üîé –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
async def ask_name(message: types.Message):
    await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=kb_back)

@dp.message(F.text == "üîô –í –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –ë–ò–ù ---
def is_bin(text: str) -> bool:
    return text.isdigit() and len(text) == 12

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ---
@dp.message(F.text)
async def handle_search(message: types.Message):
    query = message.text.strip()
    if not query:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –ë–ò–ù –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.")
        return

    await message.answer("üîé –ò—â—É –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏...")

    try:
        data = await search_company(query)
        if not data:
            await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back)
            return

        text = format_result(data)
        if not text.strip():
            await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back)
            return

        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤, —Ä–∞–∑–æ–±—å—ë–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        for i in range(0, len(text), 3900):
            await message.answer(text[i:i+3900], parse_mode="Markdown", disable_web_page_preview=True)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=kb_back)

# --- Health-check –¥–ª—è Render ---
async def start_server():
    app = web.Application()

    async def health(_):
        return web.Response(text="OK")

    app.router.add_get("/", health)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"‚úÖ Health —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    await start_server()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
